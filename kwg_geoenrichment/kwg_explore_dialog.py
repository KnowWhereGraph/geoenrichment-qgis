# -*- coding: utf-8 -*-
"""
/***************************************************************************
 kwg_geoenrichmentDialog
                                 A QGIS plugin
 KWG Geoenrichment plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-06-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Rushiraj Nenuji, University of California Santa Barbara
        email                : nenuji@nceas.ucsb.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import json
import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
from PyQt5 import QtCore
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView, QComboBox
from qgis._core import QgsMessageLog, Qgis

from PyQt5.QtGui import QIcon

from .kwg_sparqlquery import kwg_sparqlquery
from .kwg_sparqlutil import kwg_sparqlutil

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'kwg_explore_dialog_base.ui'))


class kwg_exploreDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(kwg_exploreDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.eventPlaceTypeDict = dict()

        # KWG module objects
        self.sparqlQuery = kwg_sparqlquery()

        self.populateEventPlaceTypes()
        self.updateTableView()
        self.retrievePropertyList()
        # self.randTest()


        # font = QFont()
        # font.setPointSize(20)
        #
        # self.label.setFont(font)

        # icon
        self.toolButton.setIcon(QIcon(':/plugins/kwg_geoenrichment/resources/icon_DrawPtXY.png'))
        self.toolButton_1.setIcon(QIcon(':/plugins/kwg_geoenrichment/resources/icon_DrawL.png'))
        self.toolButton_2.setIcon(QIcon(':/plugins/kwg_geoenrichment/resources/icon_DrawP.png'))


    def populateEventPlaceTypes(self):
        # QgsMessageLog.logMessage("sending query", "kwg_explore_geoenrichment",
        #                          level=Qgis.Info)

        sparqlResultJSON = self.sparqlQuery.EventTypeSPARQLQuery()

        # QgsMessageLog.logMessage(json.dumps(sparqlResultJSON), "kwg_explore_geoenrichment",
        #                          level=Qgis.Info)

        for obj in sparqlResultJSON:
            if((obj["entityType"] is not None and obj["entityType"]["type"] is not None and obj["entityType"]["type"] == "uri" ) and
                    (obj["entityTypeLabel"] is not None and obj["entityTypeLabel"]["type"] is not None and obj["entityTypeLabel"]["type"] == "literal" )):
                self.eventPlaceTypeDict[obj["entityTypeLabel"]["value"]] = obj["entityType"]["value"]

        for key in self.eventPlaceTypeDict:
            self.comboBox.addItem(key)

        return


    def updateTableView(self):
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(3)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

        tableHeader = ['Property', 'Merge Rule', "URI"]
        self.tableWidget.setHorizontalHeaderLabels(tableHeader)

        propertyList = ["rdf:Label", "rdfType", "kwg:affectedBy", "kwg:somrRandProperty"]


        for val in propertyList:
            row =0
            chkBoxItem = QTableWidgetItem(val)
            chkBoxItem.setText(val)
            chkBoxItem.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
            chkBoxItem.setCheckState(QtCore.Qt.Unchecked)

            self.tableWidget.setItem(row, 0, chkBoxItem)

            self.tableWidget.setItem(row, 2, QTableWidgetItem(val))

            # self.tableWidget.setItem(row, 3, QTableWidgetItem("Text"))
            row += 1

        for row in range(3):
            comboBox = QComboBox()
            for txt in ["", "ADD", "MEAN", "FIRST", "LAST", "CONCAT", "COUNT", "SUBTRACT", "STD DEV"]:
                comboBox.addItem(txt)
            self.tableWidget.setCellWidget(row, 1, comboBox)


    def retrievePropertyList(self):
        commonPropJSON = self.sparqlQuery.commonPropertyExploreQuery()
        sosaPropJSON = self.sparqlQuery.commonSosaObsPropertyExploreQuery()
        inversePropJSON = self.sparqlQuery.inverseCommonPropertyExploreQuery()

        QgsMessageLog.logMessage("commonPropJSON : " + json.dumps(commonPropJSON), "kwg_explore_geoenrichment", level= Qgis.Info)
        QgsMessageLog.logMessage("sosaPropJSON : " + json.dumps(sosaPropJSON), "kwg_explore_geoenrichment", level =Qgis.Info)
        QgsMessageLog.logMessage("inversePropJSON : " + json.dumps(inversePropJSON), "kwg_explore_geoenrichment", level= Qgis.Info)

        pass


