# -*- coding: utf-8 -*-
"""
/***************************************************************************
 kwg_property_geoenrichmentDialog
                                 A QGIS plugin
 KWG Geoenrichment plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-06-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Rushiraj Nenuji, University of California Santa Barbara
        email                : nenuji@nceas.ucsb.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
from PyQt5.QtWidgets import QLabel, QHBoxLayout, QComboBox, QLayout
from qgis._core import QgsMessageLog, Qgis, QgsVectorLayer

from .kwg_sparqlquery import kwg_sparqlquery
from .kwg_sparqlutil import kwg_sparqlutil
from .kwg_util import kwg_util as UTIL
from .kwg_json2field import kwg_json2field as Json2Field

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'kwg_linkedData_relationship_finder_dialog_base.ui'))


class kwg_linkedDataDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(kwg_linkedDataDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        # self.verticalLayout.setSpacing(20)
        # self.verticalLayout.setSizeConstraint(QLayout.SetNoConstraint)
        self.setWindowTitle("KWG Linked-Data Relation Finder tool")
        self.firstPropertyLabelURLDict = dict()
        self.secondPropertyLabelURLDict = dict()
        self.thirdPropertyLabelURLDict = dict()
        self.fourthPropertyLabelURLDict = dict()
        self.SPARQLQuery = kwg_sparqlquery()
        self.SPARQLUtil = kwg_sparqlutil()
        self.inplaceIRIList = []
        self.Util = UTIL()
        self.JSON2Field = Json2Field()
        self.sparqlEndpoint = "http://stko-roy.geog.ucsb.edu:7202/repositories/plume_soil_wildfire"
        self.path_to_gpkg = "/var/local/QGIS/kwg_results.gpkg"
        self.layerName = "geo_results"
        self.inplaceIRIList = []
        self.propertyCounter = 0
        self.counterDict = {
            1: "First",
            2: "Second",
            3: "Third",
            4: "Fourth"
        }

        self.secondDegreeInit = False
        self.thirdDegreeInit = False

        self.processRelFinder()
        # self.processLRDF()


    def processRelFinder(self):
        # initialize the first click
        self.onClick()
        # bind the event to the button click
        self.addContent.clicked.connect(self.onClick)

        # load the place IRI list
        self.loadIRIList()
        QgsMessageLog.logMessage("place URIs loaded successfully.", "kwg_geoenrichment",
                                 level=Qgis.Info)

        # self.populateFirstDegreeProperty()
        #
        # if int(self.degreeVal) > 2:
        #     self.comboBox_2.currentIndexChanged.connect(self.populateThirdDegreeProperty)


    def updateDegreeVal(self):
        self.degreeVal = self.comboBox_degree.currentText()


    def loadIRIList(self, path_to_gpkg='/var/local/QGIS/kwg_results.gpkg', layerName="geo_results"):
        # get the path to a geopackage e.g. /home/project/data/data.gpkg
        iriList = []

        gpkg_places_layer = path_to_gpkg + "|layername=%s" % (layerName)

        vlayer = QgsVectorLayer(gpkg_places_layer, layerName, "ogr")

        if not vlayer.isValid():
            return iriList
        else:
            for feature in vlayer.getFeatures():
                attrs = feature.attributes()
                iriList.append(attrs[1])

        self.inplaceIRIList = iriList
        # QgsMessageLog.logMessage(", ".join(iriList), "kwg_geoenrichment",
        #                          level=Qgis.Info)


        return


    def populateFirstDegreeProperty(self):
        firstPropertyURLList = self.getFirstDegreeProperty()
        # self.comboBox_1.clear()
        self.comboBox_1.addItems(list(set(firstPropertyURLList)))
        self.comboBox_1.currentIndexChanged.connect(self.updateFirstDegreeSelection)
        return


    def getFirstDegreeProperty(self):
        # decided to work in both directions
        self.firstDirection = "BOTH"
        # get the first property URL list
        firstPropertyURLListJsonBindingObject = self.SPARQLQuery.relFinderCommonPropertyQuery(self.inplaceIRIList,
                                                                                         relationDegree=1,
                                                                                         propertyDirectionList=[
                                                                                             self.firstDirection],
                                                                                         selectPropertyURLList=["", "",
                                                                                                                ""],
                                                                                         sparql_endpoint=self.sparqlEndpoint)
        firstPropertyURLList = []
        for jsonItem in firstPropertyURLListJsonBindingObject:
            firstPropertyURLList.append(jsonItem["p1"]["value"])

        if self.sparqlEndpoint == self.SPARQLUtil._WIKIDATA_SPARQL_ENDPOINT:
            firstPropertyLabelJSON = self.SPARQLQuery.locationCommonPropertyLabelQuery(firstPropertyURLList,
                                                       sparql_endpoint=self.sparqlEndpoint)
            # firstPropertyLabelJSON = firstPropertyLabelJSONObj["results"]["bindings"]

            # get the first property label list
            firstPropertyURLList = []
            firstPropertyLabelList = []
            for jsonItem in firstPropertyLabelJSON:
                propertyURL = jsonItem["p"]["value"]
                firstPropertyURLList.append(propertyURL)
                propertyName = jsonItem["propertyLabel"]["value"]
                firstPropertyLabelList.append(propertyName)
        else:
            firstPropertyLabelList = self.SPARQLUtil.make_prefixed_iri_batch(firstPropertyURLList)

        self.firstPropertyLabelURLDict = dict(zip(firstPropertyLabelList, firstPropertyURLList))

        return firstPropertyLabelList


    def updateFirstDegreeSelection(self):
        self.firstPropertyLabel = self.comboBox_1.currentText()

        if self.firstPropertyLabel == None or self.firstPropertyLabel == "''":
            self.firstPropertyURL = ""
        else:
            self.firstPropertyURL = self.firstPropertyLabelURLDict[self.firstPropertyLabel]

        if int(self.degreeVal) > 1:
            self.populateSecondDegreeProperty()


    def populateSecondDegreeProperty(self):
        secondPropertyURLList = self.getSecondDegreeProperty()
        # QgsMessageLog.logMessage(", ".join(secondPropertyURLList), "kwg_geoenrichment",
        #                                                   level=Qgis.Info)

        # self.comboBox_2.clear()
        self.comboBox_2.addItems(list(set(secondPropertyURLList)))
        self.comboBox_2.currentIndexChanged.connect(self.updateSecondDegreeSelection)
        return


    def getSecondDegreeProperty(self):
        self.secondDirection = "BOTH"

        # get the second property URL list
        secondPropertyURLListJsonBindingObject = self.SPARQLQuery.relFinderCommonPropertyQuery(self.inplaceIRIList,
                                                                                          relationDegree=2,
                                                                                          propertyDirectionList=[
                                                                                              self.firstDirection,
                                                                                              self.secondDirection],
                                                                                          selectPropertyURLList=[
                                                                                              self.firstPropertyURL, "", ""],
                                                                                          sparql_endpoint=self.sparqlEndpoint)
        secondPropertyURLList = []
        for jsonItem in secondPropertyURLListJsonBindingObject:
            secondPropertyURLList.append(jsonItem["p2"]["value"])

        if self.sparqlEndpoint == self.SPARQLUtil._WIKIDATA_SPARQL_ENDPOINT:
            secondPropertyLabelJSON = self.SPARQLQuery.locationCommonPropertyLabelQuery(secondPropertyURLList,
                                                                                   sparql_endpoint=self.sparqlEndpoint)
            # secondPropertyLabelJSON = secondPropertyLabelJSONObj["results"]["bindings"]

            # get the second property label list
            secondPropertyURLList = []
            secondPropertyLabelList = []
            for jsonItem in secondPropertyLabelJSON:
                propertyURL = jsonItem["p"]["value"]
                secondPropertyURLList.append(propertyURL)
                propertyName = jsonItem["propertyLabel"]["value"]
                secondPropertyLabelList.append(propertyName)
        else:
            secondPropertyLabelList = self.SPARQLUtil.make_prefixed_iri_batch(secondPropertyURLList)

        self.secondPropertyLabelURLDict = dict(zip(secondPropertyLabelList, secondPropertyURLList))

        return secondPropertyLabelList


    def updateSecondDegreeSelection(self):
        self.secondPropertyLabel = self.comboBox_2.currentText()

        if self.secondPropertyLabel == None or self.secondPropertyLabel == "''":
            self.secondPropertyURL = ""
        else:
            self.secondPropertyURL = self.secondPropertyLabelURLDict[self.secondPropertyLabel]

        if int(self.degreeVal) > 2:
            self.populateThirdDegreeProperty()


    def populateThirdDegreeProperty(self):
        thirdPropertyURLList = self.getThirdDegreeProperty()
        # QgsMessageLog.logMessage(", ".join(secondPropertyURLList), "kwg_geoenrichment",
        #                                                   level=Qgis.Info)

        # self.comboBox_3.clear()
        self.comboBox_3.addItems(list(set(thirdPropertyURLList)))
        self.comboBox_3.currentIndexChanged.connect(self.updateThirdDegreeSelection)
        return


    def getThirdDegreeProperty(self):

        self.thirdDirection = "BOTH"

        # get the third property URL list
        thirdPropertyURLListJsonBindingObject = self.SPARQLQuery.relFinderCommonPropertyQuery(self.inplaceIRIList,
                                                                                         relationDegree=3,
                                                                                         propertyDirectionList=[
                                                                                             self.firstDirection,
                                                                                             self.secondDirection,
                                                                                             self.thirdDirection],
                                                                                         selectPropertyURLList=[
                                                                                             self.firstPropertyURL,
                                                                                             self.secondPropertyURL, ""],
                                                                                         sparql_endpoint=self.sparqlEndpoint)
        thirdPropertyURLList = []
        for jsonItem in thirdPropertyURLListJsonBindingObject:
            thirdPropertyURLList.append(jsonItem["p3"]["value"])

        if self.sparqlEndpoint == self.SPARQLUtil._WIKIDATA_SPARQL_ENDPOINT:
            thirdPropertyLabelJSON = self.SPARQLQuery.locationCommonPropertyLabelQuery(thirdPropertyURLList,
                                                                                  sparql_endpoint=self.sparqlEndpoint)

            # get the third property label list
            thirdPropertyURLList = []
            thirdPropertyLabelList = []
            for jsonItem in thirdPropertyLabelJSON:
                propertyURL = jsonItem["p"]["value"]
                thirdPropertyURLList.append(propertyURL)
                propertyName = jsonItem["propertyLabel"]["value"]
                thirdPropertyLabelList.append(propertyName)
        else:
            thirdPropertyLabelList = self.SPARQLUtil.make_prefixed_iri_batch(thirdPropertyURLList)

        self.thirdPropertyLabelURLDict = dict(zip(thirdPropertyLabelList, thirdPropertyURLList))

        return thirdPropertyLabelList


    def updateThirdDegreeSelection(self):
        self.thirdPropertyLabel = self.comboBox_3.currentText()

        if self.thirdPropertyLabel == None or self.thirdPropertyLabel == "''":
            self.thirdPropertyURL = ""
        else:
            self.thirdPropertyURL = self.thirdPropertyLabelURLDict[self.thirdPropertyLabel]


    def onClick(self):
        self.propertyCounter += 1
        if self.propertyCounter == 1:
            labelString = "Keep exploring content"
        else:
            labelString = "More Content"

        self.labelObj = QLabel()
        self.labelObj.setText(labelString)
        self.labelObj.setObjectName("labelObj_{}".format(str(self.propertyCounter)))
        self.verticalLayout.addWidget(self.labelObj)

        self.comboBox = QComboBox()
        self.comboBox.setObjectName("comboBox{}".format(str(self.propertyCounter)))
        self.comboBox.setFixedWidth(500)



        self.verticalLayout.addWidget(self.comboBox)

        if self.propertyCounter == 4:
            self.addContent.setEnabled(False)