# -*- coding: utf-8 -*-
"""
/***************************************************************************
 kwg_pluginEnrichmentDialog
                                 A QGIS plugin
 KWG plugin Enrichment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-06-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Rushiraj Nenuji, University of California Santa Barbara
        email                : nenuji@nceas.ucsb.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import json
import logging
import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
import geojson
from PyQt5 import QtCore
from PyQt5.QtCore import QVariant
from PyQt5.QtWidgets import QTableWidgetItem, QHeaderView, QComboBox
from qgis._core import QgsMessageLog, Qgis, QgsFields, QgsField, QgsVectorLayer, QgsFeature, QgsGeometry, \
    QgsVectorFileWriter, QgsProject

from PyQt5.QtGui import QIcon

from .kwg_sparqlquery import kwg_sparqlquery
from .kwg_sparqlutil import kwg_sparqlutil
from .kwg_util import kwg_util as UTIL

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'kwg_plugin_enrichment_dialog_base.ui'))


class kwg_pluginEnrichmentDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(kwg_pluginEnrichmentDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # logging
        self.logger = logging.getLogger()
        self.logger.setLevel(logging.DEBUG)  # or whatever
        handler = logging.FileHandler(
            '/var/local/QGIS/kwg_geoenrichment.log', 'w',
            'utf-8')  # or whatever
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(filename)s:%(funcName)s - %(message)s')  # or whatever
        handler.setFormatter(formatter)  # Pass handler as a parameter, not assign
        self.logger.addHandler(handler)
        self.params = {}

        self.sparql_query = kwg_sparqlquery()
        self.sparql_util = kwg_sparqlutil()


    def setParams(self, params):
        self.params.update(params)
        self.ifaceObj = self.params["ifaceObj"]


    def execute(self):
        # manage first degree
        self.populateFirstDegreeSubject()
        self.comboBox_S0.currentIndexChanged.connect(lambda: self.firstDegreeSubjectHandler())
        return


    def populateFirstDegreeSubject(self):
        entityType = self.sparql_query.EventTypeSPARQLQuery(sparql_endpoint=self.params["end_point"],
                                               wkt_literal=self.params["wkt_literal"],
                                               geosparql_func=self.params["geosparql_func"])

        self.comboBox_S0.clear()
        self.comboBox_S0.addItem("--- SELECT ---")
        for entityTypeObject in entityType:
            val = self.sparql_util.make_prefixed_iri(entityTypeObject["entityType"]["value"])
            self.comboBox_S0.addItem(val)


    def populateFirstDegreePredicate(self):
        self.comboBox_P0.clear()
        self.comboBox_P0.addItem("--- SELECT ---")
        firstPropertyURLList = []
        firstPropertyURLList.extend(self.getFirstDegreeProperty())
        self.comboBox_P0.addItems(list(set(firstPropertyURLList)))
        self.comboBox_P0.currentIndexChanged.connect(self.populateFirstDegreeObject)
        return


    def populateFirstDegreeObject(self):
        self.pred0 = self.comboBox_P0.currentText()
        self.comboBox_O0.clear()
        self.comboBox_O0.addItem("--- SELECT ---")
        firstObjectList = []
        # QgsMessageLog.logMessage(json.dumps(self.firstPredicateObjectDict), "kwg_geoenrichment", level=Qgis.Info)
        # QgsMessageLog.logMessage(str(self.firstPredicateObjectDict[self.pred0]["objectList"]),"kwg_geoenrichment", level=Qgis.Info)
        firstObjectList.extend(self.firstPredicateObjectDict[self.pred0]["objectList"])
        # QgsMessageLog.logMessage(str(firstObjectList), "kwg_geoenrichment", level=Qgis.Info)
        self.comboBox_O0.addItems(list(set(firstObjectList)))
        QgsMessageLog.logMessage(str(firstObjectList), "kwg_geoenrichment", level=Qgis.Info)
        QgsMessageLog.logMessage(self.pred0, "kwg_geoenrichment", level=Qgis.Info)


    def firstDegreeSubjectHandler(self):
        self.sub0 = self.comboBox_S0.currentText()
        # self.sparql_query.TypeAndGeoSPARQLQuery(wkt_literal=self.params["wkt_literal"],
        #                                        geosparql_func=self.params["geosparql_func"])
        self.sub0_url = self.sparql_util.remake_prefixed_iri(self.sub0)

        geoSPARQLResponse = self.sparql_query.TypeAndGeoSPARQLQuery(sparql_endpoint=self.params["end_point"],
                                                selectedURL=self.sub0_url,
                                                query_geo_wkt=self.params["wkt_literal"],
                                                geosparql_func=self.params["geosparql_func"])

        QgsMessageLog.logMessage("GeoJSON response received from the server", "kwg_geoenrichment",
                                 level=Qgis.Info)
        self.handleGeoJSONObject(geoResult=geoSPARQLResponse)

        # handle predicate retrieval
        self.loadIRIList()
        self.populateFirstDegreePredicate()


    def handleGeoJSONObject(self, geoResult):
        QgsMessageLog.logMessage("handleGeoJSONObject", "kwg_geoenrichment", level=Qgis.Info)

        with open('/var/local/QGIS/kwg_data.geojson', 'w') as f:
            geojson.dump(geoResult, f)

        geopackagedResponse = self.createGeoPackageFromSPARQLResult(geoResult)
        # self.createShapeFileFromSPARQLResult(geoResult)

        if (geopackagedResponse):
            QgsMessageLog.logMessage("Successfully created a geopackage file", "kwg_geoenrichment", level=Qgis.Info)
        else:
            QgsMessageLog.logMessage("Error while writing geopackage", "kwg_geoenrichment", level=Qgis.Error)

        pass


    def createGeoPackageFromSPARQLResult(self, GeoQueryResult, out_path="/var/local/QGIS/kwg_results.gpkg",
                                         inPlaceType="", selectedURL="",
                                         isDirectInstance=False):
        '''
        GeoQueryResult: a sparql query result json obj serialized as a list of dict()
                    SPARQL query like this:
                    select distinct ?place ?placeLabel ?placeFlatType ?wkt
                    where
                    {...}
        out_path: the output path for the create geo feature class
        inPlaceType: the label of user spercified type IRI
        selectedURL: the user spercified type IRI
        isDirectInstance: True: use placeFlatType as the type of geo-entity
                          False: use selectedURL as the type of geo-entity
        '''
        # a set of unique WKT for each found places
        placeIRISet = set()
        placeList = []
        geom_type = None

        util_obj = UTIL()

        layerFields = QgsFields()
        layerFields.append(QgsField('place_iri', QVariant.String))
        layerFields.append(QgsField('label', QVariant.String))
        layerFields.append(QgsField('type_iri', QVariant.String))

        for idx, item in enumerate(GeoQueryResult):
            wkt_literal = item["wkt"]["value"]
            # for now, make sure all geom has the same geometry type
            if idx == 0:
                geom_type = util_obj.get_geometry_type_from_wkt(wkt_literal)
            else:
                if geom_type != util_obj.get_geometry_type_from_wkt(wkt_literal):
                    QgsMessageLog.logMessage("%s is not equal to %s"%(geom_type, util_obj.get_geometry_type_from_wkt(wkt_literal)), "kwg_geoenrichment", level=Qgis.Info)

            if isDirectInstance == False:
                placeType = item["placeFlatType"]["value"]
            else:
                placeType = selectedURL
            print("{}\t{}\t{}".format(
                item["place"]["value"], item["placeLabel"]["value"], placeType))
            if len(placeIRISet) == 0 or item["place"]["value"] not in placeIRISet:
                placeIRISet.add(item["place"]["value"])
                placeList.append(
                    [item["place"]["value"], item["placeLabel"]["value"], placeType, wkt_literal])

        if geom_type is None:
            raise Exception("geometry type not found")

        vl = QgsVectorLayer(geom_type + "?crs=epsg:4326", "geo_results", "memory")
        pr = vl.dataProvider()
        pr.addAttributes(layerFields)
        vl.updateFields()

        if len(placeList) == 0:
            QgsMessageLog.logMessage("No {0} within the provided polygon can be finded!".format(inPlaceType),
                                     level=Qgis.Info)
        else:

            if out_path == None:
                QgsMessageLog.logMessage("No data will be added to the map document.", level=Qgis.Info)
            else:

                for item in placeList:
                    place_iri, label, type_iri, wkt_literal = item
                    wkt = wkt_literal.replace("<http://www.opengis.net/def/crs/OGC/1.3/CRS84>", "")

                    feat = QgsFeature()
                    geom = QgsGeometry.fromWkt(wkt)

                    # TODO: handle the CRS
                    # feat.setGeometry(self.transformSourceCRStoDestinationCRS(geom, src=4326, dest=3857))

                    feat.setGeometry(geom)
                    feat.setAttributes(item[0:3])

                    pr.addFeature(feat)
                vl.updateExtents()

                options = QgsVectorFileWriter.SaveVectorOptions()
                options.layerName = 'geo_results'
                context = QgsProject.instance().transformContext()
                error = QgsVectorFileWriter.writeAsVectorFormatV2(vl, out_path, context, options)
                self.ifaceObj.addVectorLayer(out_path, 'geo_results', 'ogr')

        return error[0] == QgsVectorFileWriter.NoError


    def loadIRIList(self, path_to_gpkg='/var/local/QGIS/kwg_results.gpkg', layerName="geo_results"):
        # get the path to a geopackage e.g. /home/project/data/data.gpkg
        iriList = []

        gpkg_places_layer = path_to_gpkg + "|layername=%s" % (layerName)

        vlayer = QgsVectorLayer(gpkg_places_layer, layerName, "ogr")

        if not vlayer.isValid():
            return iriList
        else:
            for feature in vlayer.getFeatures():
                attrs = feature.attributes()
                iriList.append(attrs[1])

        self.inplaceIRIList = iriList

        return


    def getFirstDegreeProperty(self):
        # decided to work in both directions
        self.firstDirection = "BOTH"
        # get the first property URL list
        firstPropertyURLListJsonBindingObject = self.sparql_query.relFinderCommonPropertyQuery(self.inplaceIRIList,
                                                                                              relationDegree=1,
                                                                                              propertyDirectionList=[
                                                                                                  self.firstDirection],
                                                                                              selectPropertyURLList=["",
                                                                                                                     "",
                                                                                                                     ""],
                                                                                              sparql_endpoint=self.params["end_point"])
        firstPropertyURLList = []
        firstPredicateObjectDict = {}
        for jsonItem in firstPropertyURLListJsonBindingObject:
            propertyURL = jsonItem["p1"]["value"]
            firstPropertyURLList.append(propertyURL)
            propertyPrefixedIRI = self.sparql_util.make_prefixed_iri(propertyURL)
            if propertyPrefixedIRI in firstPredicateObjectDict:
                firstPredicateObjectDict[propertyPrefixedIRI]["objectList"].append(jsonItem["o1"]["value"])
                if "o1type" in jsonItem and jsonItem["o1type"]["value"] is not None and not jsonItem["o1type"]["value"].startswith("_:node"):
                    firstPredicateObjectDict[propertyPrefixedIRI]["objectTypeList"].append(jsonItem["o1type"]["value"])
            else:
                firstPredicateObjectDict[propertyPrefixedIRI] = {}
                firstPredicateObjectDict[propertyPrefixedIRI]["objectList"] = ["--- SELECT ---"]
                firstPredicateObjectDict[propertyPrefixedIRI]["objectList"].append(jsonItem["o1"]["value"])
                if "o1type" in jsonItem and jsonItem["o1type"]["value"] is not None and not jsonItem["o1type"]["value"].startswith("_:node"):
                    firstPredicateObjectDict[propertyPrefixedIRI]["objectTypeList"] = ["--- SELECT ---"]
                    firstPredicateObjectDict[propertyPrefixedIRI]["objectTypeList"].append(jsonItem["o1type"]["value"])

        if self.params["end_point"] == self.sparql_util._WIKIDATA_SPARQL_ENDPOINT:
            firstPropertyLabelJSON = self.sparql_query.locationCommonPropertyLabelQuery(firstPropertyURLList,
                                                                                       sparql_endpoint=self.params["end_point"])
            # firstPropertyLabelJSON = firstPropertyLabelJSONObj["results"]["bindings"]

            # get the first property label list
            firstPropertyURLList = []
            firstPropertyLabelList = []
            for jsonItem in firstPropertyLabelJSON:
                propertyURL = jsonItem["p"]["value"]
                firstPropertyURLList.append(propertyURL)
                propertyName = jsonItem["propertyLabel"]["value"]
                firstPropertyLabelList.append(propertyName)
        else:
            firstPropertyLabelList = self.sparql_util.make_prefixed_iri_batch(firstPropertyURLList)

        self.firstPropertyLabelURLDict = dict(zip(firstPropertyLabelList, firstPropertyURLList))
        self.firstPredicateObjectDict = firstPredicateObjectDict

        return firstPropertyLabelList

